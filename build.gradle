buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

group = 'com.gohome'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
		resources {
			srcDirs 'src/main/java'
		}
	}
}

dependencies {
	// spring boot
	compile("org.springframework.boot:spring-boot-starter")
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-jdbc")
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.0.0')

	compile("org.apache.commons:commons-lang3:3.4")
	compile("commons-io:commons-io:2.4")
	compile("org.json:json:20160212")
	compile("com.alibaba:fastjson:1.2.16")


	compile("org.springframework.boot:spring-boot-starter-thymeleaf")



	// spring
	compile("org.springframework:spring-web")
	compile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
	compile("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final")

	testCompile("org.springframework.boot:spring-boot-starter-test")
	//druid数据源
	compile group: 'org.javassist', name: 'javassist', version:'3.20.0-GA'
	compile group: 'ognl', name: 'ognl', version:'3.1.4'
	//compile("com.alibaba:druid:1.0.26")
	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.39'
	compile("org.mybatis:mybatis:3.1.1")


}

/*

jar {
	String someString = ''
	configurations.runtime.each {someString = someString + " lib\\"+it.name} //遍历项目的所有依赖的jar包赋值给变量someString
	manifest {
		attributes 'Main-Class': 'com.gohome.Application'
		attributes 'Class-Path': someString
	}
}

//清除上次的编译过的文件
task clearPj(type:Delete){
	delete 'build','target'
}
task copyJar(type:Copy){
	from configurations.runtime
	into ('build/libs/lib')

}
//把JAR复制到目标目录
task release(type: Copy,dependsOn: [build,copyJar]) {
//    from  'conf'
	//   into ('build/libs/eachend/conf')
}*/
